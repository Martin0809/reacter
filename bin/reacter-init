#!/usr/bin/env node

const program = require('commander');
const chalk = require('chalk');
const path = require('path');
const exists = require('fs').existsSync;
const inquirer = require('inquirer');
const rm = require('rimraf').sync;
const download = require('download-git-repo');
const ora = require('ora');
const Metalsmith = require('metalsmith');
const Handlebars = require('handlebars');
const async = require('async');
const render = require('consolidate').handlebars.render;
const multimatch = require('multimatch');
const getOptions = require('../lib/options');
const ask = require('../lib/ask');
const filter = require('../lib/filter');

program
  .usage('[project-name]');

program.on('--help', function () {
  console.log();
  console.log();
  console.log('  Examples:');
  console.log();
  console.log(chalk.gray('    # create a new project with an official template'));
  console.log('    $ react init my-project');
  console.log();
});

help();

console.log();
process.on('exit', function () {
  console.log();
});

const rawName = program.args[0];
const inPlace = !rawName || rawName === '.';
const name = inPlace ? path.relative('../', process.cwd()) : rawName
const to = path.join(process.cwd(), rawName);

if (exists(to)) {
  inquirer.prompt([{
    type: 'confirm',
    name: 'ok',
    message: inPlace
      ? 'Generate project in current directory?'
      : 'Target directory exists. Continue?'
  }]).then(answers => {
    if (answers.ok) run();
  });
} else {
  run();
}

function help () {
  program.parse(process.argv);
  if (program.args.length < 1) return program.help();
}

function run() {
  inquirer.prompt([{
    type: 'list',
    name: 'config',
    message: 'Which configuration do you need:',
    choices: ['Router', 'Router + Rudex']
  }]).then(answers => {
    if (answers.config === 'Router') {
      downloadAndGenerate('TP-router');
    } else if (answers.config === 'Router + Rudex') {
      downloadAndGenerate('TP-redux');
    }
  });
}

function downloadAndGenerate(template) {
  const spinner = ora('downloading template');
  const json = path.resolve(to, 'meta.json');
  const js = path.resolve(to, 'meta.js');

  spinner.start();
  if (!inPlace && exists(to)) rm(to);
  download(`github:Martin0809/reacter#${template}`, rawName, { clone: false }, err => {
    spinner.stop();
    if (err) console.log(chalk.red(chalk.white('  reacter'), chalk.gray('·'), `Failed to download repo github:Martin0809/reacter#${template}: ` + err.message.trim()));
    generate(name, to, path.resolve(rawName || '.'), err => {
      if (err) console.log(chalk.red(chalk.white('  reacter'), chalk.gray('·'), `Failed to download repo github:Martin0809/reacter#${template}: ` + err.message.trim()));

      if (exists(json)) {
        rm(path.resolve(to, 'meta.json'));
      } else if (exists(js)) {
        rm(path.resolve(to, 'meta.js'));
      }

      console.log('');
      console.log(chalk.white('  reacter'), chalk.gray('·'), `Generated "${name}".`);
      console.log();
      console.log('  To get started:');
      console.log();
      if (!inPlace) console.log(`    cd ${name}`);
      console.log('    npm install');
      console.log('    npm start');
      console.log();
      console.log('  Example app listening at', chalk.blue('http://localhost:3000'));
    });
  });
}

function generate(name, src, dest, callback) {
  const opts = getOptions(name, src);
  const metalsmith = Metalsmith(path.join(src));
  const data = Object.assign(metalsmith.metadata(), {
    destDirName: name,
    inPlace: dest === process.cwd(),
    noEscape: true
  });
  const helpers = { chalk };

  opts.helpers && Object.keys(opts.helpers).map(key => {
    Handlebars.registerHelper(key, opts.helpers[key])
  });

  if (opts.metalsmith && typeof opts.metalsmith.before === 'function') {
    opts.metalsmith.before(metalsmith, opts, helpers)
  }

  metalsmith.use(askQuestions(opts.prompts))
    .use(filterFiles(opts.filters))
    .use(renderTemplateFiles(opts.skipInterpolation));

  if (typeof opts.metalsmith === 'function') {
    opts.metalsmith(metalsmith, opts, helpers)
  } else if (opts.metalsmith && typeof opts.metalsmith.after === 'function') {
    opts.metalsmith.after(metalsmith, opts, helpers)
  }

  metalsmith.clean(false)
    .source('.') // start from template root instead of `./src` which is Metalsmith's default for `source`
    .destination(dest)
    .build((err, files) => {
      if (typeof opts.complete === 'function') {
        const helpers = { chalk, logger, files }
        opts.complete(data, helpers)
      }
      callback(err);
    })

  return data

  inquirer.prompt([{
    type: 'input',
    name: 'config',
    message: `Project name`,
    default: name,
  }]).then(answers => {

    callback()
  });
}

function askQuestions(prompts) {
  return (files, metalsmith, callback) => {
    ask(prompts, metalsmith.metadata(), callback);
  }
}

function filterFiles(filters) {
  return (files, metalsmith, callback) => {
    filter(files, filters, metalsmith.metadata(), callback);
  }
}

function renderTemplateFiles(skipInterpolation) {
  skipInterpolation = typeof skipInterpolation === 'string'
    ? [skipInterpolation]
    : skipInterpolation;
  return (files, metalsmith, callback) => {
    const keys = Object.keys(files);
    const metalsmithMetadata = metalsmith.metadata();
    async.each(keys, (file, next) => {
      if (skipInterpolation && multimatch([file], skipInterpolation, { dot: true }).length) {
        return next();
      }

      const str = files[file].contents.toString();

      if (!/{{([^{}]+)}}/g.test(str)) {
        return next();
      }

      render(str, metalsmithMetadata, (err, res) => {
        if (err) {
          err.message = `[${file}] ${err.message}`;
          return next(err);
        }
        files[file].contents = new Buffer(res);
        next();
      });
    }, callback);
  }
}

// function logMessage(message, data) {
//   if (!message) return;
//   render(message, data, (err, res) => {
//     if (err) {
//       console.error('\n   Error when rendering template complete message: ' + err.message.trim());
//     } else {
//       console.log('\n' + res.split(/\r?\n/g).map(line => '   ' + line).join('\n'));
//     }
//   });
// }
